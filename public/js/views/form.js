// Generated by CoffeeScript 1.9.1
(function() {
  define(['mr', 'underscore', 'models/item', 'constants', 'text!templates/form.html'], function(Mr, _, ItemModel, constants, formTpl) {
    return Mr.ItemView.extend({
      template: _.template(formTpl),
      ui: {
        form: '.form-group',
        input: '#item-title-input',
        add: '#item-add',
        clear: '#clear-completed',
        completeAll: '#complete-all'
      },
      modelEvents: {
        'invalid': 'onInvalid'
      },
      events: {
        'click @ui.add': 'addItem',
        'click @ui.clear': 'removeCompleted',
        'click @ui.completeAll': 'completeAll',
        'keypress @ui.input': 'addOnEnter'
      },
      addOnEnter: function(e) {
        this.ui.form.removeClass('has-error');
        if (e.which === constants.ENTER_KEY) {
          return this.addItem();
        }
      },
      addItem: function() {
        this.model.set('title', this.ui.input.val().trim());
        if (this.model.isValid()) {
          this.collection.add(this.model);
          this.model.save();
          return this.createNewItem();
        }
      },
      createNewItem: function() {
        console.log('created new item');
        this.stopListening(this.model, 'invalid');
        this.model = new ItemModel();
        this.listenTo(this.model, 'invalid', this.onInvalid);
        return this.ui.input.val('');
      },
      removeCompleted: function() {
        var completed;
        completed = this.collection.where({
          completed: true
        });
        return completed.map(function(item) {
          return item.destroy();
        });
      },
      completeAll: function() {
        return this.collection.map(function(item) {
          item.set('completed', true);
          return item.save();
        });
      },
      onInvalid: function() {
        return this.ui.form.addClass('has-error');
      }
    });
  });

}).call(this);

//# sourceMappingURL=form.js.map
